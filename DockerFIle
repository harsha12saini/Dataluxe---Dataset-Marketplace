# # Use an official Node.js runtime as a parent image
# FROM node:16

# # Set the working directory
# WORKDIR /app

# # Copy the package.json and install dependencies
# COPY package*.json ./
# RUN npm install

# # Copy the rest of the application code
# COPY . .

# # Build the app
# RUN npm run build

# # Expose the port the app runs on
# EXPOSE 3000

# # Serve the frontend
# CMD ["npx", "serve", "-s", "build"]




# # Use the official Node.js image as a parent image
# FROM node:18

# # Set the working directory in the container
# WORKDIR /app

# # Copy package.json and package-lock.json
# COPY package*.json /app/

# # Install dependencies
# RUN npm install

# # Copy the rest of the application code into the container at /app
# COPY . /app/

# # Build the React application
# RUN npm run build

# # Install `serve` to serve the built React app
# RUN npm install -g serve

# # Expose port 5000 for the web server
# EXPOSE 5000

# # Use `serve` to serve the built React app
# CMD ["serve", "-s", "build", "-l", "5000"]


# Stage 1: Build the React app
# Use the official Node.js image as the build stage
FROM node:18 AS build

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json first to leverage Docker cache
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code into the container
COPY . .

# Build the React application
RUN npm run build

# Stage 2: Serve the app using a lightweight server
# Use a smaller base image for the runtime
FROM node:18-slim

# Install `serve` to serve the built React app
RUN npm install -g serve

# Copy the built files from the build stage
COPY --from=build /app/build /app/build

# Expose port 5000 for the web server
EXPOSE 5000

# Use `serve` to serve the built React app
CMD ["serve", "-s", "/app/build", "-l", "5000"]
